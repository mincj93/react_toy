JSX 문법 3개

1. class 값을 할당하려면 속성명을 class 가 아닌!! "className" 으로 써야함
ex)
<div className='black-nav'></div>

2. 설정한 변수를 어딘가에서 사용하기 위해선 중괄호 사이에 변수명을 넣는다.
ex) 
let post = '제목';
<h1>{post}<h1/>

3. style 넣을땐 중괄호를 두번 써야하고, 
대쉬로(-) 구분된 것들은 모두 카멜케이스 적용해서 대쉬 없애주기

ex)
여기서 fontSize 는 원래 css 에서 font-size 이다. JSX 문법에 맞게 변형한것임.
style={{background : 'red', fontSize : '16px'}}

--------------------------------------------------------------------------------------------------

리액트 콘솔 찍어보면 2개씩 출력되는데 그거 싫으면
<React.StrictMode> 태그 없애면된다. (보텅 index.js 에 있음)
디버깅을 할라고 그러는 거라고 한다.

--------------------------------------------------------------------------------------------------

useState

자료를 잠깐 저장할 땐 let으로 그냥 선언하고 쓰기
하지만 useState 도 써도 됨

1. 상단에 import
import { useState } from 'react';

2. 사용할 함수(컴포넌트에 소환)
let [ a , b ] = useState();

3. 원하는 자료 보관
let [ a , b ] = useState('남자 코트 추천');

a 변수에는 '남자 코트 추천' 값이 들어있음.
b 변수는 useState 값 변경용 "함수"이다. ★★★★★★
>> b 를 써서 값을 변경해야 html 재랜더링이 잘된다.
>> useState 의 값을 변경할거면 반드시 b 를 써야함 ★★★★★★

-- state변경함수(b 함수)를 써서 값 변경하기,
첫번째로, state변경함수는 변경할변수와 값을 비교하는 과정을 거친다.
만약 변경전 기존 state와 신규 state 의 값이 같을 경우 변경을 하지 않는다.
state변경함수는 매개변수를 받으면 해당 변수값으로 통째로 값을 바꿈.
<span onClick={ () => { b(변경할값) } }> </span>

★★★★★★ state가 array 이거나 object 형식일 경우!!! 반드시 독립적 카피본 만들기!!
원본 데이터를 복사하여 쓰도록 하자. >> spread 함수 사용 (...배열변수명)



★★★ 자바스크립트의 array 형식의 특이한 특징, Spread 함수 ★★★
자바스크립트의 array 는 한번 생성되면 계속 그 객체를 가르킨다.
하지만 아래와 같이 스프레드 함수를 쓰면 가르키는 함수의 주소가 달라지기 때문에
같다고 판단하지 않음.

let arr1 = [1,2,3];
arr1[0] = 3;
let arr2 = arr1;
let arr3 = [...arr1];   // 스프레드 함수 사용

console.log(arr1 === arr2); // true
console.log(arr1 === arr3); // false

스프레드 함수로 2개의 배열 하나로 합치는 방법? concat 함수를 써도 되지만 스프레드 함수 써보자.
let arr1 = [1,2,3]
let arr2 = [4,5,6]
두개의 배열을 하나의 대괄호로 묶어주면 된다.
let arr3 = [...arr1, ...arr2]   // arr3 = [1,2,3,4,5,6] 이 된다.


그래서 언제쓰냐고???
useState 의 값이 변경되면 해당 html이 재랜더링(자동바뀜)된다!!
따라서 값이 변할 때 html에 자동으로 반영되게 하고싶으면 쓰라.
해당 값이 자주자주 변경될 때 useState 로 빼놓고 쓰자.

배열로 여러개도 됨.
let [a,b] = useState(['남자 코트 추천' , '강남 우동맛집' , '파이썬독학']);
사용은 {a[0]} , {a[1]}, {a[2]} 이렇게 쓰면 됨

--------------------------------------------------------------------------------------------------

Destructuring 문법

array 형식에 있는 값을 편하게 쓸 수 있게 하는것.

let num = [1,2];  가 있다고 쳤을때 1,2 를 미리 빼고 사용하고 싶다?
let [변수명,변수명] = [값,값]; 형식으로 써주면 된다.
ex)
let [ a, c ] = [3, 4];
a 변수에는 3 이 담겨있다.
c 변수에는 4 가 담겨있다.


--------------------------------------------------------------------------------------------------


js 파일 맨 위에
/* eslint-disable */
을 써두면 warnning 을 다 없애준다. 참고.


--------------------------------------------------------------------------------------------------

컴포넌트를 언제 따로 만들어야하나??
1. 반복적인 html 을 축약해서 쓸 때.
2. 페이지 하나를 크게 만들때
3. ui가 자주 변경될 때

★ 주의 
컴포넌트를 만든다는건 다른 함수를 하나 만든다는 뜻이다.
따라서 자바스크립트에서 함수는 변수를 사용할 때 
함수의 중괄호 내부에 있는 변수만 사용가능한데
컴포넌트는 다른 함수를 만드는 것이므로 값을 쓸 때 문제가 생김.


컴포넌트 만들기
1. 컴포넌트 (function) 하나 만들고
2. return 값으로 괄호 안에 html 담기
3. 해당 return 하는 값을 쓸 위치에 <함수명></함수명> 해주기
컴포넌트를 만들어주는 함수는 반드시 대문자로 시작해야함. ★★★

여기서 프레그먼트라는 문법이 있음.
reutrn 할 때 2개 이상의 태그를 리턴하면 안된다.
써야한다면 모든 태그를 감싸는 하나의 태그가 있어야함.
근데 div 를 생성하면 의미없이 하나 생성하는건데
그냥 감싸주는 <></> 태그를 사용해서 감싸도 된다.
<> ~리털할태그들~ </> 이렇게.


--------------------------------------------------------------------------------------------------

동적 UI만들기
1. html, css 로 디자인 완성시켜두기
2. ui의 현재 상태를 state 로 저장
3. state에 따라 ui 가 어떻게 보일지 분기처리로 작성
분기처리로 작성할 땐 html 쓸 부분에 if 문을 쓸 수 없기에 삼항연산자를 써야함
삼항연산자 >> 조건식 ? 참일때 실행코드 : 거짓일때 실행코드
ex)
    <div>
        {
            alert == true ? <div className="alert alert-warning">2초이내 구매시 할인ㅇㅇ</div> : null
        }
    </div>
--------------------------------------------------------------------------------------------------

똑같은 ui 반복문으로 찍어내기 (map)
Array 자료형에 사용가능.
ex)
let arr1 = [1,2,3];
arr1.map(콜백함수)


배열객체의 map 함수 특징 1.
arr1.map(function(){
    console.log(1);     // arr1 의 자료 개수만큼 이 콜백함수를 반복실행시킴. ★★★★★★
});

배열객체의 map 함수 특징 2.
arr1.map(function(param){   // 매개변수인 param은 arr1 에 할당되어있는 값들임.
    console.log(param);
});

배열객체의 map 함수 특징 3.
arr1.map(function(param){   
    return '123123'     // return 으로 값을 돌려주면 arr1 에 들어있던 값의 개수만큼 return 에 정의한 모든 것들을 배열에 반복해서 넣음.
});

배열객체의 map 함수 특징 4.
arr1.map(function(param1, param2){  // param2 는 map 반복문이 돌때마다 0부터시작해서 1씩 증가하는 정수를 담고있다. 인덱스라고 보자
   console.log(param2); 
});

배열객체의 map 함수 특징 5.
글제목.map(function(arr, i){
    return (
        <div className='list' key={i}>         // key 를 반드시 설정해주자. 고유값을 설정해야하므로 i를 써서 인덱싱해주면 됨
            <h4 onClick={() => {
                let copy = [...따봉];
                copy[i] = copy[i] + 1;
                따봉변경(copy)
            }}>{글제목[i]}<span onClick={() => {
                따봉변경(따봉+1)}}>👍</span> {따봉[i]} 
            </h4>
            <p>2월 17일 발행</p>
        </div>
    );
})

--------------------------------------------------------------------------------------------------

Props 문법
부모에서 자식 컴포넌트에 값 전달할 때 사용하기
★오직 부모컴포넌트에서 자식컴포넌트로 "한 방향"으로만 전송 가능하다.
자식컴포넌트에서 부모로 못 보냄.
자식과 자식 컴포넌트끼리 공유 못함.

1. 부모컴포넌트에서 자식컴포넌트에 값 넘기기 = 변수 숫자 함수 다 넘길 수 있음.
<자식컴포넌트함수명 넘길변수명={값 혹은 변수}>
ex)
<Modal title={boardTitle} />    // Modal 컴포넌트로 title 을 보냄

2. 자식 컴포넌트(Modal)에서 매개변수로 값 받아 사용하기
function 자식컴포넌트(변수명){
    console.log(변수명)
    return(
        <div>
            <h4>변수명.넘길변수명</h4>
        </div>
    );
}

ex)
Modal 컴포넌트 함수
function Modal(prop){
    console.log(prop)
    return(
        <div>
            <h4>prop.title</h4>
        </div>
    );
}


--------------------------------------------------------------------------------------------------

이벤트 버블링?
클릭 이벤트가 상위 html 로 퍼지는 현상.
특정 이벤트를 수행하면 상위 태그의 개수만큼 실행되는 것을 뜻함.

리액트에서 이런한 이벤트버블링을 막으려면
해당 이벤트함수에 매개변수를 1개 주고, 매개변수.stopPropagation() 을 주면 된다.
ex)
<div className='list' key={i}>
    <h4 onClick={() => {
        setModal((!modal))
        setTitle(i)
    }}>{글제목[i]}
<span onClick={(e) => {             // 매개변수 e를 줌.
        e.stopPropagation();        // 이벤트버블링 막음
        let copy = [...따봉];
        copy[i] = copy[i] + 1;
        따봉변경(copy)
    }}>👍</span> {따봉[i]} 
    </h4>
    <p>2월 17일 발행</p>
</div>

--------------------------------------------------------------------------------------------------


리액트에서 이미지 넣는방법
1. css 파일 에서 이미지 경로로 불러오기
background-image: url(상대경로/파일명.확장자) ;

2. jsx 파일에서 불러오기
1번처럼 url 써서 넣으면 나오지 않는다.
1) 선언해주기
import 작명 from 이미지경로
ex) import bg from './img/bg.png';

2) 작명 변수를 url 에 넣기
<div className='main-bg' style={{ backgroundImage : 'URL(작명)'}}></div>
ex) <div className='main-bg' style={{ backgroundImage : 'URL(' + bg + ')'}}></div>
주의할점!! 'URL(' + bg + ')' 를 한 이유는 문자열이기 때문에 bg 변수명을 사용하기위해 + 로 문자열 연결방법을 쓴것.

3. 여러개의 이미지파일을 쓸 땐 puclic 폴더 안에 보관하고 쓰자.
public 폴더에 있는 이미지의 이름 "logo192.png"
JSX 에서 사용할 땐?
<img src='/logo192.png' width="80%"/>
이것처럼 그냥 / 쓰고 파일경로+파일명.확장자 쓰면 된다.

public 폴더 사용시 주의점!!!!!
public 폴더 내부에있는 파일들 한정하여, 변수값으로 태그 안에
{process.env.PUBLIC_URL + "/파일경로.파일명.확장자"} 로 써주면 된다.
ex) <img src={process.env.PUBLIC_URL + '/img/logo512.png'}/>
꼭 기억하자. public 폴더 내부에 있는 파일들만 먹히는 방법이다.


--------------------------------------------------------------------------------------------------

export 문법

새로운 js 파일을 만들어서 그 파일 내부의 객체 A 를 다른 js 파일에서 사용하고 싶을때 사용

letA.js 파일안에 변수 1개만 exprt 하고 싶다면
해당파일 맨 아래 export default 변수명; 하면된다.

근데 2개 이상을 export 할 땐
export {변수명, 변수명} 해줘야함.
import 할 때도 export할 때 내보낸 객체 순서대로 들어가있다. 받아서 쓰려면
import { 변수명 , 변수명} from '경로/파일명'

--------------------------------------------------------------------------------------------------
★★★★★★★★★★★★★★★★★★
무료 호스팅해주는 github pages에 배포해보기
html css js 파일을 무료로 호스팅해줌. 코딩애플꺼 안되서 찾아서 함.

참고 사이트
https://min88.tistory.com/entry/React-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-githubPages%EB%A1%9C-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0

배포 전 프로젝트 세팅. 
세팅1. npm i gh-pages --save-dev 설치
세팅2. package.json 파일에 홈페이지 주소 추가
"homepage": "http://mincj93.github.io/react_deploy"

homepage 라는 요소는 github 사이트 배포할 때 하는 설정임. 
★ http://사용자이름.github.io/레포지토리이름"

세팅3. scripts 요소에 predeploy, deploy 요소 추가하기
"predeploy": "npm run build",
"deploy": "gh-pages -d build"

배포하기 - 깃허브 세팅
1. 깃허브에 새로운 repository 만들기
2. 프로젝트 폴더 들어가서 깃허브에 프로젝트 연동시키기.
3. 명령어 npm run deploy 실행


--------------------------------------------------------------------------------------------------

★★★★ react-router-dom 라이브러리 ★★★★

라우터를 사용해서 페이지 전환할 때 사용
1. 설치
npm i react-router-dom@6 

2. index.js 파일로 이동(메인 페이지파일) 및 import 해주기
import {BrouserRouter} from "react-router-dom";

3. 라우터를 사용할 컴포넌트를 <BrouserRouter></BrouserRouter>로 감싸기
ex)
<BrouserRouter>
    <App />
</BrouserRouter>

4. 검색해서 사용법대로 쓰기
    import 선언
    import {Routes, Route, Link, useNavigate, Outlet} from 'react-router-dom';


    기본사용법 - Routes 컴포넌트 안에 Route 컴포넌트들 배치하기
    ex) 
    <Routes> 
        <Route />
        <Route />
        <Route />
    </Routes>


    4-1. path
    말 그대로 경로를 작성해주는 것
    ex)
    <Routes> 
        <Route path='/detail'/>
    </Routes> 
    

    4-2. element
    보여줄 페이지의 컴포넌트를 넣는 곳.
    ex)
    <Routes> 
        <Route path='/' element={<div>메인페이지</div>}/>
        <Route path='/detail' element={<div>상세페이지에용</div>}/>
        <Route path='/about' element={<div>about페이짐</div>}/>
    </Routes>

    ex)
    <Routes> 
        <Route path='/' element={
          <>
          <div className='main-bg'></div>

          <div className='container'>
            <div className='row'>
              {
                shoes.map((data, idx) => {
                  return (
                    <Card shoes={shoes[idx]} key = {idx} />
                  );
                })
              }
              
            </div>
          </div>
          </>
        }/>
        <Route path='/detail' element={<div>상세페이지에용</div>}/>
    </Routes>


    4-3. Link
    버튼과 같은 기능을한다고 보면 된다. (a태그 같은 기능임)
    to 속성으로 이동할 경로를 지정한다.
    ex)
    <Link to="/">홈으로</Link>
    <Link to="/detail">상세페이지</Link>


    4-4. useNavigate
    페이지 이동을 도와준다.
    Hook 이다. (Hook == 유용한 함수 모음집이라고 보면 된다. ★★★ 함수형 컴포넌트에서 React Hooks를 사용하기 위해서는 함수형 컴포넌트의 이름은 반드시 대문자로 시작해야 hooks를 사용할 수 있다. ★★★)
    Link태그는 a태그 같은 기능이기에 밑줄이 생김 == 거슬리기에 개선한 태그임.
    

    1. 사용할 컴포넌트에 함수호출 선언
    let navigate = useNavigate();
    
    2. Nav 태그에 Link 까지 합치고, onClick 함수의 콜백함수로 호출해준다.
    onClick={() => { navigate('이동할 경로')}}

    <Nav className="me-auto">
        <Nav.Link onClick={() => { navigate('/detail')}}>Features</Nav.Link>
    </Nav>
    
    --navigate(1)
    앞으로 한 페이지 이동해달라 라는 뜻.(브라우저의 앞으로가기 버튼이랑 동일)

    --navigate(-1)
    뒤로 한 페이지 이동해달라 라는 뜻.(브라우저의 뒤로가기 버튼이랑 동일)


    4-5. Nested Routes 문법, Outlet
    Nested Routes 문법은 유사한 여러페이지(컴포넌트)를 보여줘야할 때 쓴다.
    중복되는 경로를 path의 속성값에 다시 쓰지 않아도 되게끔 도와주는 문법 사용법.
    Route 태그 안에 또다시 Route태그를 포함시켜주면 중복되는 경로를 안 써도된다.

    ex)
    <Routes>
        <Route path='/about' element={<About />}>
            <Route path='member' element={<Member />}/>    // 경로가 /about/member 가 된다.
            <Route path='location' element={<Location />}/>  // 경로가 /about/location 이 된다.
        </Route>
    </Routes>

    주의점!!
            위처럼 쓰면 About 컴포넌트와 Member 컴포넌트를 동시에 보여준다. 하지만
            정확히는 About 컴포넌트 내부에 Member 컴포넌트를 보여주게 된다.
            따라서 어디에 보여줄지 정확히 작성해야함.
            어디에 정확히 보여줄지 명시하는게 Outlet 컴포넌트임.


    4-6. Outlet
    Nested Routes 문법으로 작성한 컴포넌트를 보여줄때 쓰는 태그
    <Routes>
        <Route path='/about' element={<About />}>
            <Route path='member' element={<Member />}/>
            <Route path='location' element={<Location />}/>
        </Route>
    </Routes>
    이렇게 만들었다고 했을때
    상위 Route 인 About 컴포넌트 내부에 Outlet 을 써준다.
    
    function About() {
        return (
            <div>
            <h4>회사정보</h4>
            <Outlet></Outlet>
            </div>
        )
    }
    
    이렇게 하면 About 컴포넌트 안에 Member 컴포넌트를 포함시켜 보여준다.



    4-7. 404 페이지 만들기
    요청이 이상한 경우 에러페이지를 연결해주는 방법임.

    <Routes>
        <Route path = "/detail" />
        <Route path = "/main" />
        <Route path = "*" element={<div>존재하지 않는 페이지</div>}/>
    </Routes>

    path 속성값이 존재하지 않는 경로를 요청할경우 path = "*" 를 타게 된다.
    404 페이지로 가는 route 는 항상 맨 마지막에 작성해야 한다.

    4-8. url 파라미터 문법 ( useParams 훅 사용)
    nodejs 에서 쓰는 와일드카드 문법과 동일하게 path 속성값에 주소 + /:작명 을 넣어주면 된다.
    <Route path = "/detail/:작명" />

    ex)
    <Route path = "/detail/:id" />

    useParams 훅 사용하기
    1. import { useParams } from "react-router-dom";  선언
    2. let {작명} = useParams(); 객체 생성 = 현재 URL의 파라미터정보들(와일드카드 변수와 값)이 있다.
    3. let {작명} = useParams();
        ex) let {id} = useParams();
        URL 에 와일드카드작명을 id 라고 하면 그대로 변수를 가져옴.

--------------------------------------------------------------------------------------------------

    styled-components 사용하기
    css 파일을 따로 사용하지 않고 자바스크립트에서 전부 해결하려할 때 사용
    ★실제 장점★
    1. css 파일을 열고 수정하지 않아도 된다.
    2. ★★★ css 스타일이 독립적으로 작용한다. ★★★
    >> css 파일들을 만들면 모든 js 파일에 동시에 적용이 되기 때문에 코드 꼬일 수 잇음.
    이건 리액트 특성이라 어쩔 수 없다. 그래서 독립적인 스타일을 적용할 때 쓴다.
    
    3. ★★★★★★★★★★★★★★★★★★ css 파일 따로 적용하는 방법
    ★★적용할컴포넌트명.module.css 로 CSS파일명 적용하기★★
    ex) App.css => App.module.css
    App.js 파일에 App.css 파일을 종속되게 적용시키고 싶다면 파일명을 바꿔줘야함.
    App.css => App.module.css 로 파일명을 바꾸자.
    그러면 App.module.css 파일만 App.js 파일에 스타일이 적용된다!!!
    

    1. 설치
    npm i styled-components

    2. 사용할 컴포넌트에서 import 하기
    import Styled from "styled-components";

    3. 컴포넌트 생성하기
    사용할 컴포넌트 함수 안에서 만들 필요가 없음.
        
        3-1. 선언
        let 변수명 = styled.컴포넌트명`     // `는 백틱임.
            css속성명 : css속성값;
            css속성명 : css속성값;
        `        

        ex)
        let YellowBtn = styled.button`
            background : yellow;
            color : black;
            padding : 10px;
        `

    4. 컴포넌트 실제 사용하기.
    return 값에 다른 컴포넌트를 사용하듯이 생성한 styled-component 의 변수명을
    태그로서 사용하면 됨.

    ex) return(
        <div>
            <YellowBtn>버튼임</YellowBtn>
        </div>
    );


--------------------------------------------------------------------------------------------------

Lifecycle 훅 과 useEffect 훅



useEffect 훅 사용법

useEffect 사용이유??
>> 컴포넌트 구성하는 코드는 모두 랜더링 하는 도중에 실행이 된다.
>> 하지만! useEffect 함수 밖에 있는 코드들은 랜더링이 모두 완료된 뒤에 실행함.
>> 한 마디로 비동기화가 아닌 동기화로 하기 때문에 차례대로 해야할 작업들은 useEffect 안에 쓴다.
>> 주로 서버에서 데이터 가져오는 함수는 여기에 쓴다. ★★★★

1. 사용할 컴포넌트에서 선언
import { useEffect } from "react";

2. 컴포넌트 함수 안에 함수 선언
useEffect(()=>{

});

3. 컴포넌트 함수가 불러질때, 업데이트 될 때(재랜더링 될 때) 실행할 함수 쓰기
useEffect(()=>{
    ~ 컴포넌트 함수가 불러질때, 업데이트 될 때 실행할 함수 ~
});


4. useEffect 실행이 되는 조건 추가하기
원래는 페이지 불러질때, 업데이트될 때만 되지만! 디펜던시를 추가하면 해당 변수가 변할때마다 다시 실행된다.
즉, 페이지가 불려오면 무조건 한번 실행하고, 그 이후에 디펜던시 값이 변경되면 또 실행한다는 뜻.

디펜던시 == 배열
useEffect(()=>{

} , []);        // 디펜던시 추가함.

ex)
useEffect(()=>{
        setTimeout(() => {
            setAlert(false);}, 2000);
}, [count, count2]);    // count 의 값이나, count2 값이 변할때마다 해당 useEffect 를 실행한다.
디펜던시는 count, count2 처럼 2개를 넣듯이 계속 넣을 수 있다.



그렇다면 무조건 딱 1번만 실행되고 그 이후엔 실행되지 않게 하려면?
디펜던시를 빈 배열로 줘야함.
ex)
useEffect(()=>{
        lg('이건 페이지 불려올때 딱 1번만 출력된다');
}, []); // 디펜던시 빈 배열 추가.


5. Clean up function 이란?

useEffect 동작 전에 실행시킬 함수를 추가하려면?
>> return 으로 함수를 추가하면 된다.
언제 쓰기위한 것인가?
>> 페이지를 랜더링(불러오기)하면서 db 를 조회한다는 useEffect를 썼다고 치자.
그런데 데이터를 불러오기 전에 페이지가 다시 랜더링 되면 기존 useEffect 뒤에 또 useEffect가 실행된다
이게 계속 반복되면 오류가 나니까 막아주기 위해 기존에 실행되고 있던 useEffect는 막을 때 쓴다.
한 마디로 한 번에 하나의 useEffect 만 실행되도록 하기 위함임.
주의점! Clean up function 은 페이지가 unmount (페이지를 닫을때)할 때 실행된다.

useEffect(()=>{
        ~~ 코드 ~~
        return () =>{
            useEffect 보다 먼저 실행될 함수
        }
}, []);


--------------------------------------------------------------------------------------------------
서버와 통신하기 AJAX ( AXIOS 로 통신하기)

AXIOS 는 AJAX 요청을 쉽게 하는 용도임.
화면의 새로고침 없이 데이터를 get / post 요청할 때 씀

★★★주의★★★
서버와 통신하면 문자만! 주고받을 수 있다. 무조건.
array나 object 형들 교환 못함. 
그러나 axios가 통신을 하면서 JSON 형식으로 주고 받는데, 
그걸 문자열에서 배열로 바꿔주기 때문에 배열을 전달받을 수 있는 것이다.
통신방법중 fetch 가 있는데 얘는 axios와 다르게 문자로 변환해주지 않음.
그래서 .then(결과 => 결과.json()) 으로 파싱을 일일히 해줘야한다.



1. 설치
npm i AXIOS 

2. 선언
import axios from 'axios';

3. 사용하기

> get 요청
ex)
    axios.get(URL주소입력)

> 요청한 데이터를 찍어보고싶다면
axios.get(URL주소입력).then(( 응답데이터변수작명 )=>{ console.log( 응답데이터변수작명 ) });
응답데이터변수작명 안에는 잡다한 데이터가 다 들어가있음. 우리가 원하는 응답데이터는
응답데이터변수작명.data 를 찍어보면 나옴


> 에러처리 하기
서버 응답을 못 받거나 오류났을 땐?
axios.get(URL주소입력)
.then(( 응답데이터변수작명 )=>{ 
    console.log( 성공했을 때 실행 할 함수 );
    console.log( 응답데이터변수작명 );
})
.catch(()=>{
    // 여기에 오류를 써준다.
    console.log( 실패했을 때 실행 할 함수 );
});

> post 요청으로 데이터 보내기
ex)
axios.post('보낼주소URL', {name:"value"}).then(()=>{
    성공시 실행 함수
})
.catch(()=>{
    실패시 실행 함수
})


> 동시에 요청 여러개 하기
Promise.all() 쓰기. 배열에 여러 요청을 담아서 쓰면 된다
Promise.all([ axios 요청 배열 ])
ex)
Promise.all([ axios.get('/url') , axios.get('/url') ])
.then(()=>{
    성공시 실행 함수              
})


--------------------------------------------------------------------------------------------------
탭 UI 만들기 (모달창 있는거라고 보면된다)

useState 로 값을 미리 저장하고 사용하면된다.

JSX 에서 if 문을 쓰고 싶다면 외부에 쓰고 컴포넌트로서 적용해야한다.

즉, 컴포넌트로 만든다는건 function을 하나 만든다는건데 if 문 들어간 기능에
return 값으로 원하는 div 를 주면 된다.

--------------------------------------------------------------------------------------------------
Redux

props 전송이 귀찮을 때 사용한다.
state 값을 props 없이 공유하기 위해서 사용한다.
즉 Redux 라는 자바스크립트 바구니가 state를 모두 다 가지고 있어서 필요할 때 빼서 쓰면 되는것.
>> state를 모아서 가지고 있을 js파일은 따로 개발자가 만들어줘야함.

1. 설치
★★★주의★★★
react 버젼이 18.1 이상이어야만 설치가 잘된다
npm i @reduxjs/toolkit react-redux

2. 세팅하기
    2-1. 바구니역할 js 파일 생성
    2-2. import { configureStore } from "@reduxjs/toolkit";
    2-3.
        export default configureStore({
            reducer: {

            }
        });
    2-4. index.js 에 가서 
        import { Provider } from 'react-redux'; 선언하고
        import 작명 from './바구니역할js'; 바구니역할 js 선언하고
        <Provider 작명 = {바구니역할js작명}></Provider> 태그로 모든 태그 감싸기
        ex)
        <Provider store={store}>
            <BrowserRouter>
            <App />                 // App 컴포넌트와 그 자식 컴포넌트는 모두 state 공유 가능해짐
            </BrowserRouter>,
        </Provider>

3. 사용하기
3-1. store.js 작성
ex)
    let user = createSlice({           // useState 같은 역할
        name : 'user',
        initialState : 'kim'
    })  // 1. 1개의 state 정보 생성

    let stock = createSlice({           // useState 같은 역할
        name : 'stock',
        initialState : [10,11,12]
    })  // 1. 1개의 state 정보 생성

    export default configureStore({
        reducer: {
            // 2. 등록
            user : user.reducer,     // 변수명.reducer 라고 꼭 써야 등록이 된다.
            stock : stock.reducer
        }
    });

3-2. 사용할 컴포넌트에 가서 import { useSelector } from 'react-redux'; 선언
3-3. useSelector 함수를 사용해서 저장한 state 사용
let a = useSelector((state)=>{ return state })   // 기본 모양
lg(a);
lg(a.user);

3-4. 아무리 그래도 난 처음부터 특정 state만 불러와야겠다! 싶으면
    let a = useSelector((state)=>{ return state.원하는state명 })   
이런식으로 써주면 된다.
ex)
    let a = useSelector((state)=>{ return state.user })   
    lg(a);



3-5. Redux 에서 state 변경(업데이트)하기
1) 바구니역할js 에서 state 를 생성할 때 state를 변경하는 함수도 같이 넣어서 저장해둬야함.
ex)
let user = createSlice({           
    name : 'user',
    initialState : 'kim',
    reducers : {                    // user state를 수정하는 함수 쓰는곳임. reducers 철자 틀리면 안된다.
        changeName(state){          // 매개변수 state 는 기존의 state를 가지고있음.
            return 'john kim'
        },
        additionalFunction(){
            console.log('changeName 함수뿐만 아니라 다른 함수도 추가하는 방법이다.');
            return '';  // ★★★ 주의 반드시 return 값을 줘야한다. 빈값으로라도. null 리턴하면 안된다.★★★
        }
    }
}) 

2) 함수 export 시켜주기
작명.actions 를 사용하면 함수들이 저장되어있음.
관행적으로 아래와 같은 형식으로 쓴다.
export let { 함수명1, 함수명2} = user.actions;
ex)
export let {changeName, additionalFunction} = user.actions;


3) 컴포넌트로 이동해서 useDispatch() 선언해주기
    import { useDispatch, useSelector } from 'react-redux'; // 가져오고
    함수안에 let dispatch = useDispatch(); 선언

4) dispatch를 사용해서 함수 호출하기
dispatch(함수명())
ex)
    dispatch(additionalFunction())


★★★ 만약! initialState 에 object 형식으로 값이 들어가있을 경우, 수정 함수에서 return을 하지 않아도 봐준다.
--------------------------------------------------------------------------------------------------

localstorage
서버없이도 자료를 저장할 수 있는 공간. 브라우저 내부에 장착되어있음.
key = value 형태로 되어있다.
최대 5MB 까지 저장가능.
문자열만 입력 가능 >> 그러나 JSON 형태로 저장하면 배열이나 object 도 가능함.


> 저장하기
    localstorage.setItem('age', '20')

> object 저장하기
    let obj = {name : 'kim'}
    localstorage.setItem('data', JSON.stringify(obj))

> 저장된 자료 출력하기
    localstorage.getItem('age')

> object 저장된 자료 출력하기
    let 꺼낸거 = localstorage.getItem('data')
    console.log(JSON.parse(꺼낸거).name);

> 저장된 자료 삭제하기
    localstorage.removeItem('age')

--------------------------------------------------------------------------------------------------

node express 서버랑 react 연동하기

1. node서버 만들기

2. 리액트 서버 만들기

3. 리액트 build 시키기
    3-1. 콘솔창 열고 npm run build
    3-2. 
    3-3. 
    3-4. 
    3-5. 
    3-6. 
